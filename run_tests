#!/bin/bash

TEST_DIR="./test"
INCLUDE_DIRS="-I include/ -I third_party/"
BUILD_TEST_DIR="./build/test"
THIRD_PARTY_DIR="./third_party"

# Valores por defecto
VERBOSE=false
RUN_ALL=false

# Argumentos
while [[ $# -gt 0 ]]; do
  case "$1" in
    -v|--verbose)
      VERBOSE=true
      shift
      ;;
    -a|--all)
      RUN_ALL=true
      shift
      ;;
    *)
      echo "Invalid argument: $1"
      exit 1
      ;;
  esac
done

# Busca archivos fuente
TARGET_FILES=$(find src -name '*.c')

# Incluye paquetes con headers privados
PRIVATE_INCLUDE_DIRS=$(find src -name '*.h' -exec dirname {} \; | sort -u)
PRIVATE_HEADERS=""
for dir in $PRIVATE_INCLUDE_DIRS; do
  PRIVATE_HEADERS="$PRIVATE_HEADERS -I $dir"
done

mkdir -p "$BUILD_TEST_DIR"

# Muestra los archivos de test
tests=($(ls "$TEST_DIR"/test_*.c 2>/dev/null | xargs -n 1 basename))

if [ ${#tests[@]} -eq 0 ]; then
  echo "No tests found in $TEST_DIR"
  exit 1
fi

if ! $RUN_ALL; then
  echo "Found tests:"
  for i in "${!tests[@]}"; do
    echo "$((i+1))) ${tests[$i]}"
  done
  echo "a) Run all"

  read -rp "Choose a test number or input 'a' to run all of them: " choice
else
  choice="a"
fi

compile_test() {
  local test_file="$1"
  local exec_file="$BUILD_TEST_DIR/${test_file%.c}"
  local test_name="${test_file%.c}"

  echo -e "\nBuilding test: $test_name"

  if $VERBOSE; then
    gcc $TARGET_FILES "$TEST_DIR/$test_file" "$THIRD_PARTY_DIR/unity.c" \
      $INCLUDE_DIRS $PRIVATE_HEADERS -o "$exec_file"
  else
    gcc $TARGET_FILES "$TEST_DIR/$test_file" "$THIRD_PARTY_DIR/unity.c" \
      $INCLUDE_DIRS $PRIVATE_HEADERS -o "$exec_file" 2>/dev/null
  fi

  if [ $? -ne 0 ]; then
    echo -e "\nüî¥ Build error: \033[1;36m$test_file\033[0m"
    return 1
  fi

  echo "Built: $exec_file"
}

run_test() {
  local exec_file="$1"
  echo -e "\nüü¢ Running: \033[1;36m$test_file\033[0m"
  ./scripts/allTestsAreCalled $TEST_DIR/$test_file # Comprueba si se ha llamado a todos los tests

  "$exec_file"
  local status=$?

  if [ $status -eq 0 ]; then
    echo -e "\033[1;32m‚úÖ Test ${test_file%.c} ended with no failures\033[0m"
  else
    echo -e "\033[1;31m‚ùå Test ${test_file%.c} ended with exit code: $status\033[0m"
  fi

  echo "------------------------"
}


if [ "$choice" = "a" ]; then
  for test_file in "${tests[@]}"; do
    if compile_test "$test_file"; then
      run_test "$BUILD_TEST_DIR/${test_file%.c}"
    fi
  done
elif [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le ${#tests[@]} ]; then
  test_file="${tests[$((choice-1))]}"
  if compile_test "$test_file"; then
    run_test "$BUILD_TEST_DIR/${test_file%.c}"
  fi
else
  echo "Invalid option"
  exit 1
fi
